generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(cuid())
  email      String     @unique
  password   String
  name       String
  phone      String?
  logo       String?
  instagram  String?
  whatsapp   String?
  tiktok     String?
  status     UserStatus @default(ACTIVE)
  brandColor String?    @default("00D4FF")
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  role           Role            @default(OWNER)
  raffle         Raffle[]
  paymentMethods PaymentMethod[]
}

model Raffle {
  id           String       @id @default(cuid())
  title        String
  description  String?
  banner       String
  totalTickets Int          @default(100)
  price        Float
  award        Float
  status       RaffleStatus @default(ACTIVE)
  drawDate     DateTime     @default(dbgenerated("(now() + interval '15 days')"))
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  ownerId String
  owner   User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  tickets Ticket[]
}

model Ticket {
  id     String       @id @default(cuid())
  number String
  status TicketStatus @default(AVAILABLE)

  raffleId String
  raffle   Raffle @relation(fields: [raffleId], references: [id], onDelete: Cascade)

  payment Payment?
}

model Payment {
  id            String             @id @default(cuid())
  buyerName     String
  phone         String
  state         String?
  proofUrl      String
  paymentDate   DateTime           @default(now())
  paymentMethod String?
  status        PaymentStatus      @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ticketId String @unique
  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}

model PaymentMethod {
  id   String            @id @default(cuid())
  name String
  type PaymentMethodType

  bankName    String?
  phoneNumber String?
  nationalId  String?

  binanceId    String?
  binanceEmail String?

  paypalEmail String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

enum PaymentStatus {
  PENDING
  VERIFIED
  DENIED
}

enum RaffleStatus {
  ACTIVE
  PENDING
  COMPLETED
}

enum TicketStatus {
  AVAILABLE
  RESERVED
  SOLD
  WINNER
  LOSER
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum Role {
  ADMIN
  OWNER
}

enum PaymentMethodType {
  PAGO_MOVIL
  BINANCE_PAY
  PAYPAL
}
