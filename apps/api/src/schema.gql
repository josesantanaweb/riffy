# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type PaymentMethod {
  id: ID!
  name: String!
  type: String!
  bankName: String
  phoneNumber: String
  nationalId: String
  binanceId: String
  paypalEmail: String
  createdAt: DateTime!
  updatedAt: DateTime!
  owner: User
  ownerId: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Payment {
  id: ID!
  buyerName: String!
  amount: Float!
  nationalId: String!
  phone: String!
  state: String
  email: String
  paymentDate: DateTime
  proofUrl: String!
  paymentMethod: String!
  status: PaymentStatus
  tickets: [Ticket!]
  raffle: Raffle
}

"""The status of the payment"""
enum PaymentStatus {
  PENDING
  VERIFIED
  DENIED
}

type Ticket {
  id: ID!
  number: String!
  status: String
  payment: Payment
  raffle: Raffle
}

type Raffle {
  id: ID!
  title: String!
  description: String
  banner: String!
  totalTickets: Float!
  price: Float!
  award: Float!
  status: String!
  showDate: Boolean
  showProgress: Boolean
  minTickets: Float
  available: Float
  sold: Float
  progress: Float
  drawDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  tickets: [Ticket!]
  owner: User
  ownerId: String!
}

type Plan {
  id: ID!
  name: String!
  description: [String!]!
  price: Float!
  maxRaffles: Float
  maxTickets: Float
  type: PlanType!
  createdAt: DateTime
  updatedAt: DateTime
}

"""The status of the plan"""
enum PlanType {
  BASIC
  PREMIUM
  ONE_TIME
}

type PlanUsage {
  id: ID!
  currentRaffles: Float!
  currentTickets: Float
  createdAt: DateTime
  updatedAt: DateTime
  ownerId: String!
  status: PlanUsageStatus!
  planId: [String!]!
  owner: User
  plan: Plan
}

"""The status of the plan usage"""
enum PlanUsageStatus {
  ACTIVE
  EXHAUSTED
  UNLIMITED
}

type User {
  id: ID!
  name: String!
  domain: String!
  password: String
  email: String!
  logo: String
  brandColor: String
  whatsapp: String
  instagram: String
  tiktok: String
  role: Role
  status: UserStatus
  createdAt: DateTime
  updatedAt: DateTime
  raffles: [Raffle!]
  paymentMethods: [PaymentMethod!]
  plan: Plan
  planUsage: PlanUsage
}

"""Roles de usuario"""
enum Role {
  ADMIN
  OWNER
}

"""The status of the user"""
enum UserStatus {
  ACTIVE
  INACTIVE
}

type AuthResponse {
  accessToken: String!
  user: User!
}

type Notification {
  id: ID!
  description: String!
  status: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  owner: User
  ownerId: String
}

type TopBuyer {
  buyerName: String!
  nationalId: String
  totalTickets: Int!
  totalSpent: Float!
}

type PaymentsByState {
  state: String!
  percentage: Int!
}

type DashboardStats {
  totalRaffles: Int!
  soldTickets: Int!
  unsoldTickets: Int!
  totalWinners: Int!
  totalEarnings: Float!
  topBuyers: [TopBuyer!]!
  paymentsByState: [PaymentsByState!]!
  lastPayments: [Payment!]!
}

type UploadResponse {
  url: String!
  key: String!
  originalName: String!
  mimeType: String!
  size: Float!
}

type Query {
  users(role: Role): [User!]!
  user(id: String!): User!
  userByDomain(domain: String!): User!
  profile: User!
  myPlanUsage: PlanUsage
  raffles: [Raffle!]!
  raffle(id: String!): Raffle!
  tickets: [Ticket!]!
  ticketsByRaffle(raffleId: String!): [Ticket!]!
  ticketsByNationalId(nationalId: String!, raffleId: String!): [Ticket!]!
  ticket(id: String!): Ticket!
  payments(raffleId: String): [Payment!]!
  payment(id: String!): Payment!
  paymentByNationalId(nationalId: String!): Payment!
  paymentMethods: [PaymentMethod!]!
  paymentMethodsByDomain(domain: String!): [PaymentMethod!]!
  paymentMethod(id: String!): PaymentMethod!
  notifications: [Notification!]!
  notification(id: String!): Notification!
  plans: [Plan!]!
  plan(id: String!): Plan!
  dashboardStats: DashboardStats!
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  updateUser(id: String!, input: UpdateUserInput!): User!
  deleteUser(id: String!): User!
  resetPlanUsage(id: String!): PlanUsage!
  register(input: CreateUserInput!): AuthResponse!
  login(input: LoginInput!): AuthResponse!
  createRaffle(input: CreateRaffleInput!): Raffle!
  updateRaffle(id: String!, input: UpdateRaffleInput!): Raffle!
  deleteRaffle(id: String!): Raffle!
  createTicket(input: CreateTicketInput!): Ticket!
  updateTicket(id: String!, input: UpdateTicketInput!): Ticket!
  updateTicketStatus(id: String!, status: TicketStatus!): Ticket!
  deleteTicket(id: String!): Ticket!
  createPayment(input: CreatePaymentInput!): Payment!
  updatePayment(id: String!, input: UpdatePaymentInput!): Payment!
  updatePaymentStatus(id: String!, status: PaymentStatus!): Payment!
  deletePayment(id: String!): Payment!
  createPaymentMethod(input: CreatePaymentMethodInput!): PaymentMethod!
  updatePaymentMethod(id: String!, input: UpdatePaymentMethodInput!): PaymentMethod!
  deletePaymentMethod(id: String!): PaymentMethod!
  uploadImage(file: Upload!, options: UploadOptionsInput): UploadResponse!
  uploadFile(file: Upload!): String!
  executeSeed: Boolean!
  updateNotificationsStatus(ids: [String!]!, status: NotificationStatus!): String!
  updateNotificationStatus(id: String!, status: NotificationStatus!): Notification!
  createPlan(input: CreatePlanInput!): Plan!
  updatePlan(id: String!, input: UpdatePlanInput!): Plan!
  deletePlan(id: String!): Plan!
}

input CreateUserInput {
  name: String!
  domain: String!
  email: String!
  logo: String
  brandColor: String
  password: String!
  whatsapp: String
  tiktok: String
  instagram: String
  role: Role
  status: UserStatus
  planId: String
}

input UpdateUserInput {
  name: String
  domain: String
  email: String
  logo: String
  brandColor: String
  password: String
  whatsapp: String
  tiktok: String
  instagram: String
  role: Role
  status: UserStatus
  planId: String
}

input LoginInput {
  email: String!
  password: String!
}

input CreateRaffleInput {
  title: String!
  description: String
  banner: String!
  totalTickets: Int!
  price: Int!
  showDate: Boolean
  showProgress: Boolean
  minTickets: Int
  award: Int!
  status: RaffleStatus
  drawDate: DateTime!
}

"""The status of the raffle"""
enum RaffleStatus {
  ACTIVE
  PENDING
  COMPLETED
}

input UpdateRaffleInput {
  title: String
  description: String
  banner: String
  totalTickets: Int
  price: Int
  showDate: Boolean
  showProgress: Boolean
  minTickets: Int
  award: Int
  status: RaffleStatus
  drawDate: DateTime
}

input CreateTicketInput {
  number: String!
  raffleId: String!
  status: TicketStatus
}

"""The status of the ticket"""
enum TicketStatus {
  AVAILABLE
  SOLD
  PREMIUM
  WINNER
  LOSER
}

input UpdateTicketInput {
  number: String
  raffleId: String
  status: TicketStatus
}

input CreatePaymentInput {
  buyerName: String!
  nationalId: String!
  phone: String!
  amount: Float!
  email: String
  state: String
  proofUrl: String!
  paymentMethod: String!
  ticketIds: [String!]!
  raffleId: String!
  status: PaymentStatus
}

input UpdatePaymentInput {
  buyerName: String
  nationalId: String
  phone: String
  amount: Float
  email: String
  state: String
  proofUrl: String
  paymentMethod: String
  ticketIds: [String!]
  raffleId: String
  status: PaymentStatus
}

input CreatePaymentMethodInput {
  name: String
  type: String!
  bankName: String
  phoneNumber: String
  nationalId: String
  binanceId: String
  paypalEmail: String
}

input UpdatePaymentMethodInput {
  name: String
  type: String
  bankName: String
  phoneNumber: String
  nationalId: String
  binanceId: String
  paypalEmail: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UploadOptionsInput {
  folder: String
  visibility: String
}

"""The status of the notifications"""
enum NotificationStatus {
  READ
  UNREAD
}

input CreatePlanInput {
  name: String!
  description: [String!]!
  price: Float!
  maxRaffles: Float
  maxTickets: Float
  type: PlanType!
}

input UpdatePlanInput {
  name: String
  description: [String!]
  price: Float
  maxRaffles: Float
  maxTickets: Float
  type: PlanType
}