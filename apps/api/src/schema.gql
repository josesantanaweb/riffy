# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: ID!
  name: String!
  domain: String!
  password: String
  email: String!
  logo: String
  brandColor: String
  whatsapp: String
  instagram: String
  tiktok: String
  role: Role
  status: UserStatus
  createdAt: DateTime
  updatedAt: DateTime
}

"""Roles de usuario"""
enum Role {
  ADMIN
  OWNER
}

"""The status of the user"""
enum UserStatus {
  ACTIVE
  INACTIVE
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type AuthResponse {
  accessToken: String!
  user: User!
}

type Payment {
  id: ID!
  buyerName: String!
  phone: String!
  state: String
  paymentDate: DateTime
  proofUrl: String!
  paymentMethod: String!
  status: PaymentStatus
  ticket: Ticket
}

"""The status of the payment"""
enum PaymentStatus {
  PENDING
  VERIFIED
  DENIED
}

type Ticket {
  id: ID!
  number: String!
  status: String
  payment: Payment
}

type Raffle {
  id: ID!
  title: String!
  description: String
  banner: String!
  totalTickets: Float!
  price: Float!
  award: Float!
  status: String!
  available: Float
  sold: Float
  progress: Float
  drawDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  tickets: [Ticket!]
  owner: User
  ownerId: String!
}

type PaymentMethod {
  id: ID!
  name: String!
  type: String!
  bankName: String
  phoneNumber: String
  nationalId: String
  binanceId: String
  paypalEmail: String
  createdAt: DateTime!
  updatedAt: DateTime!
  owner: User
  ownerId: String
}

type UploadResponse {
  url: String!
  key: String!
  originalName: String!
  mimeType: String!
  size: Float!
}

type Query {
  users(role: Role): [User!]!
  user(id: String!): User!
  profile: User!
  raffles: [Raffle!]!
  rafflesByDomain: [Raffle!]!
  raffle(id: String!): Raffle!
  tickets: [Ticket!]!
  ticketsByRaffle(raffleId: String!): [Ticket!]!
  ticket(id: String!): Ticket!
  payments: [Payment!]!
  payment(id: String!): Payment!
  paymentMethods: [PaymentMethod!]!
  paymentMethodsByDomain(domain: String!): [PaymentMethod!]!
  paymentMethod(id: String!): PaymentMethod!
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  updateUser(id: String!, input: UpdateUserInput!): User!
  deleteUser(id: String!): User!
  register(input: CreateUserInput!): AuthResponse!
  login(input: LoginInput!): AuthResponse!
  createRaffle(input: CreateRaffleInput!): Raffle!
  updateRaffle(id: String!, input: UpdateRaffleInput!): Raffle!
  deleteRaffle(id: String!): Raffle!
  createTicket(input: CreateTicketInput!): Ticket!
  updateTicket(id: String!, input: UpdateTicketInput!): Ticket!
  deleteTicket(id: String!): Ticket!
  createPayment(input: CreatePaymentInput!): Payment!
  updatePayment(id: String!, input: UpdatePaymentInput!): Payment!
  deletePayment(id: String!): Payment!
  createPaymentMethod(input: CreatePaymentMethodInput!): PaymentMethod!
  updatePaymentMethod(id: String!, input: UpdatePaymentMethodInput!): PaymentMethod!
  deletePaymentMethod(id: String!): PaymentMethod!
  uploadImage(file: Upload!, options: UploadOptionsInput): UploadResponse!
  uploadFile(file: Upload!): String!
}

input CreateUserInput {
  name: String!
  domain: String!
  email: String!
  logo: String
  brandColor: String
  password: String!
  whatsapp: String
  tiktok: String
  instagram: String
  role: Role
  status: UserStatus
}

input UpdateUserInput {
  name: String
  domain: String
  email: String
  logo: String
  brandColor: String
  password: String
  whatsapp: String
  tiktok: String
  instagram: String
  role: Role
  status: UserStatus
}

input LoginInput {
  email: String!
  password: String!
}

input CreateRaffleInput {
  title: String!
  description: String
  banner: String!
  totalTickets: Int!
  price: Int!
  award: Int!
  status: RaffleStatus
  drawDate: DateTime!
}

"""The status of the raffle"""
enum RaffleStatus {
  ACTIVE
  PENDING
  COMPLETED
}

input UpdateRaffleInput {
  title: String
  description: String
  banner: String
  totalTickets: Int
  price: Int
  award: Int
  status: RaffleStatus
  drawDate: DateTime
}

input CreateTicketInput {
  number: String!
  raffleId: String!
  status: TicketStatus
}

"""The status of the ticket"""
enum TicketStatus {
  AVAILABLE
  RESERVED
  SOLD
  WINNER
  LOSER
}

input UpdateTicketInput {
  number: String
  raffleId: String
  status: TicketStatus
}

input CreatePaymentInput {
  buyerName: String!
  phone: String!
  state: String
  proofUrl: String!
  paymentMethod: String!
  paymentDate: DateTime
  ticketId: String!
  status: PaymentStatus
}

input UpdatePaymentInput {
  buyerName: String
  phone: String
  state: String
  proofUrl: String
  paymentMethod: String
  paymentDate: DateTime
  ticketId: String
  status: PaymentStatus
}

input CreatePaymentMethodInput {
  name: String
  type: String!
  bankName: String
  phoneNumber: String
  nationalId: String
  binanceId: String
  paypalEmail: String
}

input UpdatePaymentMethodInput {
  name: String
  type: String
  bankName: String
  phoneNumber: String
  nationalId: String
  binanceId: String
  paypalEmail: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UploadOptionsInput {
  folder: String
  visibility: String
}