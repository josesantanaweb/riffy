version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: riffy-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: riffy
      POSTGRES_USER: riffy
      POSTGRES_PASSWORD: riffy123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U riffy -d riffy"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Base de datos Redis (para caché y sesiones)
  redis:
    image: redis:7-alpine
    container_name: riffy-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API (NestJS + GraphQL)
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: riffy-api
    restart: unless-stopped
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL:-postgresql://riffy:riffy123@postgres:5432/riffy}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-1h}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "-X", "POST", "-H", "Content-Type: application/json", "-d", "{\"query\": \"{ __schema { types { name } } }\"}", "http://localhost:4000/graphql"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Aplicación Web (Next.js)
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: riffy-web
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_GRAPHQL_ENDPOINT=${NEXT_PUBLIC_API_URL}/graphql
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Panel de Administración (Next.js)
  admin:
    build:
      context: .
      dockerfile: apps/admin/Dockerfile
    container_name: riffy-admin
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_GRAPHQL_ENDPOINT=${NEXT_PUBLIC_API_URL}/graphql
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx como proxy reverso (opcional)
  nginx:
    image: nginx:alpine
    container_name: riffy-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
      - admin
      - api

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: riffy-network
