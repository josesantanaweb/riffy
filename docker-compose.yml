version: '3.8'

services:
  # Traefik como reverse proxy principal
  traefik:
    image: traefik:v3.0
    container_name: riffy-traefik
    restart: unless-stopped
    command:
      - --api.dashboard=true
      - --api.debug=true
      - --log.level=INFO
      - --providers.docker=true
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=riffy-network
      - --providers.file.filename=/etc/traefik/dynamic.yml
      - --providers.file.watch=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      - --certificatesresolvers.letsencrypt.acme.email=admin@riffy.website
      - --certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      - --global.checknewversion=false
      - --global.sendanonymoususage=false
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard de Traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yml:/etc/traefik/traefik.yml:ro
      - ./dynamic.yml:/etc/traefik/dynamic.yml:ro
      - ./ssl:/etc/traefik/ssl:ro
      - traefik_acme:/etc/traefik
    networks:
      - riffy-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.riffy.website`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: riffy-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: riffy
      POSTGRES_USER: riffy
      POSTGRES_PASSWORD: riffy123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U riffy -d riffy"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - riffy-network

  # Base de datos Redis (para caché y sesiones)
  redis:
    image: redis:7-alpine
    container_name: riffy-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - riffy-network

  # API (NestJS + GraphQL)
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: riffy-api
    restart: unless-stopped
    ports:
      - "5555:5555"  # Puerto temporal para Prisma Studio
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL:-postgresql://riffy:riffy123@postgres:5432/riffy}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-1h}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      traefik:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "-X", "POST", "-H", "Content-Type: application/json", "-d", "{\"query\": \"{ __schema { types { name } } }\"}", "http://localhost:4000/graphql"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - riffy-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.riffy.website`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.services.api.loadbalancer.server.port=4000"

  # Aplicación Web (Next.js)
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: riffy-web
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-https://api.riffy.website}
      - NEXT_PUBLIC_GRAPHQL_ENDPOINT=${NEXT_PUBLIC_API_URL:-https://api.riffy.website}/graphql
    depends_on:
      api:
        condition: service_healthy
      traefik:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - riffy-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`riffy.website`)"
      - "traefik.http.routers.web.entrypoints=websecure"
      - "traefik.http.routers.web.tls.certresolver=letsencrypt"
      - "traefik.http.services.web.loadbalancer.server.port=3000"

  # Panel de Administración (Next.js)
  admin:
    build:
      context: .
      dockerfile: apps/admin/Dockerfile
    container_name: riffy-admin
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-https://api.riffy.website}
      - NEXT_PUBLIC_GRAPHQL_ENDPOINT=${NEXT_PUBLIC_API_URL:-https://api.riffy.website}/graphql
    depends_on:
      api:
        condition: service_healthy
      traefik:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - riffy-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.admin.rule=Host(`admin.riffy.website`)"
      - "traefik.http.routers.admin.entrypoints=websecure"
      - "traefik.http.routers.admin.tls.certresolver=letsencrypt"
      - "traefik.http.services.admin.loadbalancer.server.port=3001"


volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  traefik_acme:
    driver: local

networks:
  riffy-network:
    driver: bridge
